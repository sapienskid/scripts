#!/bin/bash

# SysMon - System Monitor for Linux
# Author: sapienskid
# Description: Real-time system monitoring with colorful CLI interface
# Usage: sysmon [command] [options]
#
# Installation: 
#   sudo cp sysmon /usr/local/bin/ && sudo chmod +x /usr/local/bin/sysmon
# 
# Uninstall:
#   sudo rm /usr/local/bin/sysmon

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$HOME/.config/sysmon"
LOG_FILE="$CONFIG_DIR/sysmon.log"
ALERT_FILE="$CONFIG_DIR/alerts.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Alert thresholds (defaults)
CPU_THRESHOLD=80
MEMORY_THRESHOLD=85
DISK_THRESHOLD=90
TEMP_THRESHOLD=75
LOAD_THRESHOLD=4.0

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Print colored output
print_color() {
    echo -e "${1}${2}${NC}"
}

# Initialize configuration
init_config() {
    mkdir -p "$CONFIG_DIR"
    
    if [[ ! -f "$ALERT_FILE" ]]; then
        cat > "$ALERT_FILE" << EOF
# SysMon Alert Configuration
# Thresholds for system alerts (percentage or absolute values)

CPU_THRESHOLD=80
MEMORY_THRESHOLD=85
DISK_THRESHOLD=90
TEMP_THRESHOLD=75
LOAD_THRESHOLD=4.0

# Alert methods (true/false)
DESKTOP_NOTIFICATIONS=true
LOG_ALERTS=true
EMAIL_ALERTS=false
EMAIL_ADDRESS=""
EOF
        print_color $GREEN "Created alert configuration at $ALERT_FILE"
    fi
    
    # Load configuration
    source "$ALERT_FILE" 2>/dev/null || true
    
    touch "$LOG_FILE"
}

# Get CPU usage
get_cpu_usage() {
    # Use /proc/stat for CPU usage calculation
    local cpu_line=$(grep "^cpu " /proc/stat)
    local cpu_times=($cpu_line)
    
    local idle=${cpu_times[4]}
    local total=0
    for time in "${cpu_times[@]:1}"; do
        total=$((total + time))
    done
    
    # Sleep for a short interval to get delta
    sleep 0.1
    
    local cpu_line2=$(grep "^cpu " /proc/stat)
    local cpu_times2=($cpu_line2)
    
    local idle2=${cpu_times2[4]}
    local total2=0
    for time in "${cpu_times2[@]:1}"; do
        total2=$((total2 + time))
    done
    
    local idle_delta=$((idle2 - idle))
    local total_delta=$((total2 - total))
    
    if [[ $total_delta -gt 0 ]]; then
        local cpu_usage=$(((100 * (total_delta - idle_delta)) / total_delta))
        echo "$cpu_usage"
    else
        echo "0"
    fi
}

# Get memory usage
get_memory_info() {
    local mem_info=$(cat /proc/meminfo)
    local mem_total=$(echo "$mem_info" | grep "MemTotal:" | awk '{print $2}')
    local mem_available=$(echo "$mem_info" | grep "MemAvailable:" | awk '{print $2}')
    local mem_used=$((mem_total - mem_available))
    local mem_usage=$(((mem_used * 100) / mem_total))
    
    echo "$mem_usage $mem_used $mem_total"
}

# Get disk usage
get_disk_usage() {
    df -h / | awk 'NR==2 {print $5 " " $3 " " $2}' | sed 's/%//'
}

# Get system load
get_system_load() {
    cat /proc/loadavg | awk '{print $1 " " $2 " " $3}'
}

# Get battery information
get_battery_info() {
    local battery_info=""
    
    if command -v upower &> /dev/null; then
        local battery_device=$(upower -e | grep BAT | head -1)
        if [[ -n "$battery_device" ]]; then
            local battery_data=$(upower -i "$battery_device" 2>/dev/null)
            local percentage=$(echo "$battery_data" | grep "percentage" | awk '{print $2}' | tr -d '%')
            local state=$(echo "$battery_data" | grep "state" | awk '{print $2}')
            
            # Get time remaining (may be empty if fully charged)
            local time_remaining=$(echo "$battery_data" | grep "time to" | awk '{for(i=3;i<=NF;i++) printf "%s ", $i; print ""}' | sed 's/,$//' | xargs)
            [[ -z "$time_remaining" ]] && time_remaining="N/A"
            
            # Get battery health - try capacity field first, then calculate from energy values
            local health=$(echo "$battery_data" | grep "capacity:" | awk '{print $2}' | tr -d '%')
            if [[ -z "$health" || "$health" == "N/A" ]]; then
                health=$(echo "$battery_data" | awk '/energy-full:/ {full=$2} /energy-full-design:/ {design=$2} END {if (design > 0) printf("%.1f", full/design*100)}')
            fi
            [[ -z "$health" ]] && health="N/A"
            
            # Format health to 1 decimal place if it's a number
            if [[ "$health" != "N/A" && "$health" =~ ^[0-9.]+$ ]]; then
                health=$(printf "%.1f" "$health")
            fi
            
            echo "$percentage $state $time_remaining $health"
        else
            echo "N/A N/A N/A N/A"
        fi
    else
        # Fallback to /sys/class/power_supply
        local bat_dir="/sys/class/power_supply/BAT0"
        if [[ -d "$bat_dir" ]]; then
            local capacity=$(cat "$bat_dir/capacity" 2>/dev/null || echo "N/A")
            local status=$(cat "$bat_dir/status" 2>/dev/null || echo "N/A")
            echo "$capacity $status N/A N/A"
        else
            echo "N/A N/A N/A N/A"
        fi
    fi
}

# Get system temperature
get_temperature() {
    local temp="N/A"
    
    # Try different temperature sources
    if [[ -f /sys/class/thermal/thermal_zone0/temp ]]; then
        local temp_raw=$(cat /sys/class/thermal/thermal_zone0/temp)
        temp=$((temp_raw / 1000))
    elif command -v sensors &> /dev/null; then
        temp=$(sensors | grep -E "Core 0|Package id 0" | head -1 | grep -o '+[0-9]*' | tr -d '+' | head -1)
    fi
    
    echo "$temp"
}

# Get network information
get_network_info() {
    local interface=$(ip route | grep default | awk '{print $5}' | head -1)
    if [[ -n "$interface" ]]; then
        local rx_bytes=$(cat "/sys/class/net/$interface/statistics/rx_bytes" 2>/dev/null || echo "0")
        local tx_bytes=$(cat "/sys/class/net/$interface/statistics/tx_bytes" 2>/dev/null || echo "0")
        
        # Convert to MB
        local rx_mb=$((rx_bytes / 1024 / 1024))
        local tx_mb=$((tx_bytes / 1024 / 1024))
        
        echo "$interface $rx_mb $tx_mb"
    else
        echo "N/A 0 0"
    fi
}

# Get running processes count
get_process_count() {
    ps aux | wc -l
}

# Get uptime
get_uptime() {
    uptime -p | sed 's/up //'
}

# Send alert
send_alert() {
    local message="$1"
    local level="$2" # warning, critical
    
    if [[ "$LOG_ALERTS" == "true" ]]; then
        log "ALERT [$level]: $message"
    fi
    
    if [[ "$DESKTOP_NOTIFICATIONS" == "true" ]] && command -v notify-send &> /dev/null; then
        local urgency="normal"
        [[ "$level" == "critical" ]] && urgency="critical"
        notify-send -u "$urgency" "SysMon Alert" "$message"
    fi
    
    if [[ "$EMAIL_ALERTS" == "true" && -n "$EMAIL_ADDRESS" ]] && command -v mail &> /dev/null; then
        echo "$message" | mail -s "SysMon Alert [$level]" "$EMAIL_ADDRESS"
    fi
}

# Check thresholds and send alerts
check_alerts() {
    local cpu_usage="$1"
    local mem_usage="$2"
    local disk_usage="$3"
    local temp="$4"
    local load_1min="$5"
    
    # CPU alert
    if [[ $cpu_usage -gt $CPU_THRESHOLD ]]; then
        send_alert "High CPU usage: ${cpu_usage}% (threshold: ${CPU_THRESHOLD}%)" "warning"
    fi
    
    # Memory alert
    if [[ $mem_usage -gt $MEMORY_THRESHOLD ]]; then
        send_alert "High memory usage: ${mem_usage}% (threshold: ${MEMORY_THRESHOLD}%)" "warning"
    fi
    
    # Disk alert
    if [[ $disk_usage -gt $DISK_THRESHOLD ]]; then
        send_alert "High disk usage: ${disk_usage}% (threshold: ${DISK_THRESHOLD}%)" "warning"
    fi
    
    # Temperature alert
    if [[ "$temp" != "N/A" && $temp -gt $TEMP_THRESHOLD ]]; then
        send_alert "High temperature: ${temp}°C (threshold: ${TEMP_THRESHOLD}°C)" "critical"
    fi
    
    # Load alert
    if command -v bc &> /dev/null && (( $(echo "$load_1min > $LOAD_THRESHOLD" | bc -l 2>/dev/null || echo "0") )); then
        send_alert "High system load: $load_1min (threshold: $LOAD_THRESHOLD)" "warning"
    fi
}

# Format bytes to human readable
format_bytes() {
    local bytes="$1"
    if [[ $bytes -ge 1073741824 ]]; then
        echo "$((bytes / 1024 / 1024 / 1024))GB"
    elif [[ $bytes -ge 1048576 ]]; then
        echo "$((bytes / 1024 / 1024))MB"
    elif [[ $bytes -ge 1024 ]]; then
        echo "$((bytes / 1024))KB"
    else
        echo "${bytes}B"
    fi
}

# Get color based on usage percentage
get_usage_color() {
    local usage="$1"
    if [[ $usage -ge 90 ]]; then
        echo "$RED"
    elif [[ $usage -ge 75 ]]; then
        echo "$YELLOW"
    elif [[ $usage -ge 50 ]]; then
        echo "$BLUE"
    else
        echo "$GREEN"
    fi
}

# Create usage bar
create_bar() {
    local usage="$1"
    local width=20
    local filled=$((usage * width / 100))
    local empty=$((width - filled))
    
    local bar=""
    for ((i=0; i<filled; i++)); do
        bar+="█"
    done
    for ((i=0; i<empty; i++)); do
        bar+="░"
    done
    
    echo "$bar"
}

# Show system overview
show_overview() {
    init_config
    
    # Gather system information
    local cpu_usage=$(get_cpu_usage)
    local mem_info=($(get_memory_info))
    local mem_usage=${mem_info[0]}
    local mem_used_kb=${mem_info[1]}
    local mem_total_kb=${mem_info[2]}
    local disk_info=($(get_disk_usage))
    local disk_usage=${disk_info[0]}
    local disk_used=${disk_info[1]}
    local disk_total=${disk_info[2]}
    local load_info=($(get_system_load))
    local load_1min=${load_info[0]}
    local load_5min=${load_info[1]}
    local load_15min=${load_info[2]}
    local temp=$(get_temperature)
    local battery_info=($(get_battery_info))
    local battery_percentage=${battery_info[0]}
    local battery_state=${battery_info[1]}
    local battery_time=${battery_info[2]}
    local battery_health=${battery_info[3]}
    local network_info=($(get_network_info))
    local interface=${network_info[0]}
    local rx_mb=${network_info[1]}
    local tx_mb=${network_info[2]}
    local process_count=$(get_process_count)
    local uptime=$(get_uptime)
    
    # Check for alerts
    check_alerts "$cpu_usage" "$mem_usage" "$disk_usage" "$temp" "$load_1min"
    
    # Display header
    clear
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                              System Monitor                                 ║"
    print_color $BOLD$CYAN "║                         $(date '+%Y-%m-%d %H:%M:%S')                         ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    # System Information
    print_color $BOLD$WHITE "┌─ System Information"
    print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  $(print_color $CYAN "Hostname:")     $(hostname 2>/dev/null || cat /etc/hostname 2>/dev/null || echo "Unknown")"
    print_color $WHITE "│  $(print_color $CYAN "Kernel:")       $(uname -r)"
    print_color $WHITE "│  $(print_color $CYAN "Uptime:")       $uptime"
    print_color $WHITE "│  $(print_color $CYAN "Processes:")    $process_count"
    print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    # CPU Usage
    local cpu_color=$(get_usage_color $cpu_usage)
    local cpu_bar=$(create_bar $cpu_usage)
    print_color $BOLD$RED "┌─ CPU Usage"
    print_color $RED "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  Usage: $(print_color $cpu_color "${cpu_usage}%") [$cpu_bar] $(print_color $cpu_color "$cpu_usage%")"
    print_color $WHITE "│  Load:  $load_1min (1min) | $load_5min (5min) | $load_15min (15min)"
    print_color $RED "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    # Memory Usage
    local mem_color=$(get_usage_color $mem_usage)
    local mem_bar=$(create_bar $mem_usage)
    local mem_used_mb=$((mem_used_kb / 1024))
    local mem_total_mb=$((mem_total_kb / 1024))
    print_color $BOLD$BLUE "┌─ Memory Usage"
    print_color $BLUE "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  Usage: $(print_color $mem_color "${mem_usage}%") [$mem_bar] $(print_color $mem_color "$mem_usage%")"
    print_color $WHITE "│  Used:  ${mem_used_mb}MB / ${mem_total_mb}MB"
    print_color $BLUE "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    # Disk Usage
    local disk_color=$(get_usage_color $disk_usage)
    local disk_bar=$(create_bar $disk_usage)
    print_color $BOLD$YELLOW "┌─ Disk Usage (Root)"
    print_color $YELLOW "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  Usage: $(print_color $disk_color "${disk_usage}%") [$disk_bar] $(print_color $disk_color "$disk_usage%")"
    print_color $WHITE "│  Used:  $disk_used / $disk_total"
    print_color $YELLOW "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    # Temperature
    local temp_color=$GREEN
    if [[ "$temp" != "N/A" ]]; then
        if [[ $temp -ge 80 ]]; then
            temp_color=$RED
        elif [[ $temp -ge 70 ]]; then
            temp_color=$YELLOW
        fi
    fi
    print_color $BOLD$PURPLE "┌─ Temperature"
    print_color $PURPLE "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  CPU Temp: $(print_color $temp_color "${temp}°C")"
    print_color $PURPLE "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    # Battery (only show if battery detected)
    if [[ "$battery_percentage" != "N/A" ]]; then
        local battery_color=$GREEN
        if [[ "$battery_state" == "Discharging" ]]; then
            if [[ $battery_percentage -le 20 ]]; then
                battery_color=$RED
            elif [[ $battery_percentage -le 50 ]]; then
                battery_color=$YELLOW
            fi
        elif [[ "$battery_state" == "Charging" ]]; then
            battery_color=$BLUE
        fi
        
        local battery_bar=$(create_bar $battery_percentage)
        local battery_icon="🔋"
        [[ "$battery_state" == "Charging" ]] && battery_icon="⚡"
        
        print_color $BOLD$GREEN "┌─ Battery $battery_icon"
        print_color $GREEN "├─────────────────────────────────────────────────────────────────────────────"
        print_color $WHITE "│  Level: $(print_color $battery_color "${battery_percentage}%") [$battery_bar] $(print_color $battery_color "$battery_percentage%")"
        print_color $WHITE "│  Status: $(print_color $battery_color "$battery_state")"
        if [[ "$battery_time" != "N/A" && -n "$battery_time" && "$battery_time" != " " ]]; then
            print_color $WHITE "│  Time: $battery_time"
        fi
        if [[ "$battery_health" != "N/A" && -n "$battery_health" && "$battery_health" != " " ]]; then
            local health_color=$GREEN
            if command -v bc &> /dev/null; then
                if (( $(echo "$battery_health < 80" | bc -l 2>/dev/null || echo "0") )); then
                    health_color=$YELLOW
                fi
                if (( $(echo "$battery_health < 60" | bc -l 2>/dev/null || echo "0") )); then
                    health_color=$RED
                fi
            else
                # Fallback without bc
                if [[ ${battery_health%.*} -lt 80 ]]; then
                    health_color=$YELLOW
                fi
                if [[ ${battery_health%.*} -lt 60 ]]; then
                    health_color=$RED
                fi
            fi
            print_color $WHITE "│  Health: $(print_color $health_color "${battery_health}%")"
        fi
        print_color $GREEN "└─────────────────────────────────────────────────────────────────────────────"
        echo
    fi
    
    # Network
    print_color $BOLD$GREEN "┌─ Network ($interface)"
    print_color $GREEN "├─────────────────────────────────────────────────────────────────────────────"
    print_color $WHITE "│  Downloaded: ${rx_mb}MB"
    print_color $WHITE "│  Uploaded:   ${tx_mb}MB"
    print_color $GREEN "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    print_color $DIM "Press Ctrl+C to exit | Run 'sysmon watch' for continuous monitoring"
    echo
}

# Watch mode - continuous monitoring
watch_mode() {
    local interval="${1:-2}"
    
    print_color $GREEN "Starting continuous monitoring (${interval}s intervals)..."
    print_color $DIM "Press Ctrl+C to stop"
    
    while true; do
        show_overview
        sleep "$interval"
    done
}

# Show top processes
show_processes() {
    local count="${1:-10}"
    
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                            Top Processes                                    ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    print_color $BOLD$WHITE "┌─ CPU Usage (Top $count)"
    print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
    ps aux --sort=-%cpu | head -n $((count + 1)) | tail -n +2 | while read line; do
        local user=$(echo "$line" | awk '{print $1}')
        local pid=$(echo "$line" | awk '{print $2}')
        local cpu=$(echo "$line" | awk '{print $3}')
        local mem=$(echo "$line" | awk '{print $4}')
        local command=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}' | cut -c1-40)
        
        printf "│  %-8s %-8s $(print_color $YELLOW "%6s%%") $(print_color $BLUE "%6s%%") %s\n" "$user" "$pid" "$cpu" "$mem" "$command"
    done
    print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    print_color $BOLD$WHITE "┌─ Memory Usage (Top $count)"
    print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
    ps aux --sort=-%mem | head -n $((count + 1)) | tail -n +2 | while read line; do
        local user=$(echo "$line" | awk '{print $1}')
        local pid=$(echo "$line" | awk '{print $2}')
        local cpu=$(echo "$line" | awk '{print $3}')
        local mem=$(echo "$line" | awk '{print $4}')
        local command=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}' | cut -c1-40)
        
        printf "│  %-8s %-8s $(print_color $YELLOW "%6s%%") $(print_color $BLUE "%6s%%") %s\n" "$user" "$pid" "$cpu" "$mem" "$command"
    done
    print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    echo
}

# Show disk information
show_disk_info() {
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                            Disk Information                                 ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    print_color $BOLD$WHITE "┌─ Mounted Filesystems"
    print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
    
    df -h | grep -E "^/" | while read line; do
        local filesystem=$(echo "$line" | awk '{print $1}')
        local size=$(echo "$line" | awk '{print $2}')
        local used=$(echo "$line" | awk '{print $3}')
        local available=$(echo "$line" | awk '{print $4}')
        local usage_percent=$(echo "$line" | awk '{print $5}' | tr -d '%')
        local mountpoint=$(echo "$line" | awk '{print $6}')
        
        local usage_color=$(get_usage_color $usage_percent)
        local usage_bar=$(create_bar $usage_percent)
        
        printf "│  %-20s %8s %8s %8s $(print_color $usage_color "%4s%%") [%s]\n" "$mountpoint" "$size" "$used" "$available" "$usage_percent" "$usage_bar"
    done
    
    print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    echo
}

# Show network details
show_network_details() {
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                           Network Information                               ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    print_color $BOLD$WHITE "┌─ Network Interfaces"
    print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
    
    ip addr show | grep -E "^[0-9]+:" | while read line; do
        local interface=$(echo "$line" | awk -F': ' '{print $2}')
        local state=$(echo "$line" | grep -o "state [A-Z]*" | awk '{print $2}')
        local ip=$(ip addr show "$interface" | grep "inet " | awk '{print $2}' | head -1)
        
        local state_color=$RED
        [[ "$state" == "UP" ]] && state_color=$GREEN
        
        printf "│  %-15s $(print_color $state_color "%-8s") %s\n" "$interface" "$state" "$ip"
    done
    
    print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    echo
    
    if command -v ss &> /dev/null; then
        print_color $BOLD$WHITE "┌─ Network Connections"
        print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
        print_color $WHITE "│  $(print_color $GREEN "Established:") $(ss -t state established | wc -l)"
        print_color $WHITE "│  $(print_color $YELLOW "Listening:")   $(ss -tl | wc -l)"
        print_color $WHITE "│  $(print_color $BLUE "Total TCP:")   $(ss -t | wc -l)"
        print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
        echo
    fi
}

# Show system logs
show_logs() {
    local lines="${1:-20}"
    
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                            System Logs                                      ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    if command -v journalctl &> /dev/null; then
        print_color $BOLD$WHITE "┌─ Recent System Logs (Last $lines entries)"
        print_color $WHITE "├─────────────────────────────────────────────────────────────────────────────"
        journalctl --no-pager -n "$lines" --output=short | while read line; do
            if echo "$line" | grep -q "ERROR\|error\|Error"; then
                print_color $RED "│  $line"
            elif echo "$line" | grep -q "WARNING\|warning\|Warning"; then
                print_color $YELLOW "│  $line"
            else
                print_color $WHITE "│  $line"
            fi
        done
        print_color $WHITE "└─────────────────────────────────────────────────────────────────────────────"
    else
        print_color $YELLOW "journalctl not available"
    fi
    echo
}

# Configure alerts
configure_alerts() {
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                           Alert Configuration                               ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo
    
    print_color $BLUE "Current alert thresholds:"
    print_color $WHITE "  CPU:         ${CPU_THRESHOLD}%"
    print_color $WHITE "  Memory:      ${MEMORY_THRESHOLD}%"
    print_color $WHITE "  Disk:        ${DISK_THRESHOLD}%"
    print_color $WHITE "  Temperature: ${TEMP_THRESHOLD}°C"
    print_color $WHITE "  Load:        ${LOAD_THRESHOLD}"
    echo
    
    print_color $YELLOW "Alert configuration file: $ALERT_FILE"
    print_color $BLUE "Edit this file to modify alert thresholds and notification settings."
    echo
}

# Show help
show_help() {
    cat << EOF

$(print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗")
$(print_color $BOLD$CYAN "║                           SysMon - System Monitor                           ║")
$(print_color $BOLD$CYAN "║                      Real-time system monitoring tool                       ║")
$(print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝")

$(print_color $BOLD$BLUE "┌─ INSTALLATION")
$(print_color $BLUE "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  sudo cp sysmon /usr/local/bin/")
$(print_color $WHITE "│  sudo chmod +x /usr/local/bin/sysmon")
$(print_color $BLUE "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$GREEN "┌─ COMMANDS")
$(print_color $GREEN "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon")            Show system overview")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon watch")      [interval]  Continuous monitoring (default: 2s)")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon processes")  [count]     Show top processes (default: 10)")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon disk")                   Show disk information")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon network")               Show network details")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon logs")       [lines]     Show system logs (default: 20)")
$(print_color $WHITE "│  $(print_color $CYAN "sysmon alerts")                Configure alert thresholds")
$(print_color $GREEN "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$YELLOW "┌─ EXAMPLES")
$(print_color $YELLOW "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  sysmon                      # Quick system overview")
$(print_color $WHITE "│  sysmon watch 5              # Monitor every 5 seconds")
$(print_color $WHITE "│  sysmon processes 15         # Show top 15 processes")
$(print_color $WHITE "│  sysmon logs 50              # Show last 50 log entries")
$(print_color $YELLOW "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$PURPLE "┌─ FEATURES")
$(print_color $PURPLE "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  • Real-time CPU, memory, disk monitoring")
$(print_color $WHITE "│  • System temperature monitoring")
$(print_color $WHITE "│  • Battery level and health monitoring")
$(print_color $WHITE "│  • Network interface statistics")
$(print_color $WHITE "│  • Process monitoring (CPU and memory top)")
$(print_color $WHITE "│  • System load and uptime information")
$(print_color $WHITE "│  • Configurable alerts with notifications")
$(print_color $WHITE "│  • Colorful progress bars and status indicators")
$(print_color $WHITE "│  • System log monitoring")
$(print_color $PURPLE "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $DIM "Configuration: ~/.config/sysmon/")

EOF
}

# Main script logic
main() {
    case "${1:-overview}" in
        overview|"")
            show_overview
            ;;
        watch)
            watch_mode "$2"
            ;;
        processes|proc|ps)
            show_processes "$2"
            ;;
        disk)
            show_disk_info
            ;;
        network|net)
            show_network_details
            ;;
        logs)
            show_logs "$2"
            ;;
        alerts|config)
            configure_alerts
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_color $RED "ERROR: Unknown command: $1"
            print_color $BLUE "Run 'sysmon help' for usage information"
            exit 1
            ;;
    esac
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for bc (for floating point calculations)
    if ! command -v bc &> /dev/null; then
        missing_deps+=("bc")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_color $YELLOW "Missing optional dependencies: ${missing_deps[*]}"
        print_color $BLUE "Install with: sudo pacman -S ${missing_deps[*]}"
        echo
    fi
}

# Initialize and run
check_dependencies
main "$@"
