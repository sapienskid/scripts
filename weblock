#!/bin/bash

# WeBlock - System-wide Website Blocker for Arch Linux
# Author: sapienskid
# Description: Block/unblock websites
# Usage: weblock <command> [options] [website]
#
# Installation: 
#   sudo cp weblock /usr/local/bin/ && sudo chmod +x /usr/local/bin/weblock
# 
# Uninstall:
#   sudo rm /usr/local/bin/weblock
#   rm -rf ~/.config/weblock  # (optional, removes your configuration)

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Use the original user's home directory even when running with sudo
if [[ -n "$SUDO_USER" ]]; then
    USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
    CONFIG_DIR="$USER_HOME/.config/weblock"
else
    CONFIG_DIR="$HOME/.config/weblock"
fi

BLOCKLIST_FILE="$CONFIG_DIR/blocklist.txt"
HOSTS_FILE="/etc/hosts"
BACKUP_FILE="$CONFIG_DIR/hosts_backup.txt"
LOG_FILE="$CONFIG_DIR/weblock.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Print colored output
print_color() {
    echo -e "${1}${2}${NC}"
}

# Check if running as root for hosts file modification
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo
        print_color $BOLD$RED "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$RED "║                    PERMISSION DENIED                      ║"
        print_color $BOLD$RED "╚════════════════════════════════════════════════════════════╝"
        print_color $RED "  This operation requires root privileges"
        print_color $YELLOW "  Please run: sudo weblock [command]"
        echo
        exit 1
    fi
}

# Initialize configuration directory and files
init_files() {
    local show_banner="$1"
    local files_created=false
    
    # Create config directory
    mkdir -p "$CONFIG_DIR"
    
    # Create blocklist file if it doesn't exist
    if [[ ! -f "$BLOCKLIST_FILE" ]]; then
        cat > "$BLOCKLIST_FILE" << EOF
# WeBlock Blocklist
# Add one website per line (without http:// or https://)
# Examples:
# facebook.com
# twitter.com
# youtube.com
# reddit.com
# instagram.com
# tiktok.com
EOF
        if [[ "$show_banner" == "show_banner" ]]; then
            print_color $GREEN "  [✓] Created blocklist file"
        fi
        files_created=true
    fi
    
    # Create backup of original hosts file
    if [[ ! -f "$BACKUP_FILE" ]] && [[ -f "$HOSTS_FILE" ]]; then
        cp "$HOSTS_FILE" "$BACKUP_FILE"
        if [[ "$show_banner" == "show_banner" ]]; then
            print_color $GREEN "  [✓] Created hosts backup"
        fi
        files_created=true
    fi
    
    # Create log file
    touch "$LOG_FILE"
    
    # Show banner if explicitly requested (even if no new files created)
    if [[ "$show_banner" == "show_banner" ]]; then
        echo
        print_color $BOLD$BLUE "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$BLUE "║                  WeBlock Initialized                      ║"
        print_color $BOLD$BLUE "╚════════════════════════════════════════════════════════════╝"
        print_color $BLUE "  Configuration directory: $CONFIG_DIR"
        if [[ "$files_created" == "true" ]]; then
            print_color $GREEN "  New configuration files created!"
        else
            print_color $GREEN "  Configuration already exists and is ready!"
        fi
        print_color $BLUE "  Ready to block websites!"
        echo
    fi
}

# Clean website format
clean_website() {
    local website="$1"
    # Remove protocols, www, trailing slashes, paths
    echo "$website" | sed -e 's|^https\?://||' -e 's|^www\.||' -e 's|/.*$||' | tr '[:upper:]' '[:lower:]'
}

# Validate website format
validate_website() {
    local website="$1"
    if [[ ! "$website" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        print_color $RED "ERROR: Invalid website format: $website"
        print_color $YELLOW "Use format like: facebook.com, youtube.com, etc."
        return 1
    fi
    return 0
}

# Block a single website
block_single_website() {
    local website="$1"
    
    if [[ -z "$website" ]]; then
        print_color $RED "ERROR: Please provide a website to block"
        print_color $BLUE "Usage: weblock block facebook.com"
        return 1
    fi
    
    check_root
    website=$(clean_website "$website")
    
    if ! validate_website "$website"; then
        return 1
    fi
    
    # Check if already blocked
    if grep -q "127\.0\.0\.1[[:space:]]*$website" "$HOSTS_FILE" 2>/dev/null; then
        print_color $YELLOW "WARNING: $website is already blocked"
        return 0
    fi
    
    # Add to hosts file
    echo "127.0.0.1    $website" >> "$HOSTS_FILE"
    echo "127.0.0.1    www.$website" >> "$HOSTS_FILE"
    
    echo
    print_color $BOLD$RED "╔════════════════════════════════════════════════════════════╗"
    print_color $BOLD$RED "║                     WEBSITE BLOCKED                       ║"
    print_color $BOLD$RED "╚════════════════════════════════════════════════════════════╝"
    print_color $RED "  Target: $website"
    print_color $RED "  Status: Successfully blocked"
    echo
    
    log "Blocked single website: $website"
    
    # Flush DNS cache
    flush_dns_cache
}

# Unblock a single website
unblock_single_website() {
    local website="$1"
    
    if [[ -z "$website" ]]; then
        print_color $RED "ERROR: Please provide a website to unblock"
        print_color $BLUE "Usage: weblock unblock facebook.com"
        return 1
    fi
    
    check_root
    website=$(clean_website "$website")
    
    if ! validate_website "$website"; then
        return 1
    fi
    
    # Remove from hosts file
    sed -i "/127\.0\.0\.1[[:space:]]*$website$/d" "$HOSTS_FILE"
    sed -i "/127\.0\.0\.1[[:space:]]*www\.$website$/d" "$HOSTS_FILE"
    
    echo
    print_color $BOLD$GREEN "╔════════════════════════════════════════════════════════════╗"
    print_color $BOLD$GREEN "║                   WEBSITE UNLOCKED                        ║"
    print_color $BOLD$GREEN "╚════════════════════════════════════════════════════════════╝"
    print_color $GREEN "  Target: $website"
    print_color $GREEN "  Status: Successfully unblocked"
    echo
    
    log "Unblocked single website: $website"
    
    # Flush DNS cache
    flush_dns_cache
}

# Lock a website (add to list and immediately block)
lock_website() {
    local website=""
    local add_to_list=true
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -n|--no-list)
                add_to_list=false
                shift
                ;;
            -*)
                print_color $RED "ERROR: Unknown option: $1"
                print_color $BLUE "Usage: weblock lock [-n|--no-list] website"
                return 1
                ;;
            *)
                website="$1"
                shift
                ;;
        esac
    done
    
    if [[ -z "$website" ]]; then
        print_color $RED "ERROR: Please provide a website to lock"
        print_color $BLUE "Usage: weblock lock [-n|--no-list] facebook.com"
        return 1
    fi
    
    check_root
    website=$(clean_website "$website")
    
    if ! validate_website "$website"; then
        return 1
    fi
    
    # Add to blocklist if requested
    if [[ "$add_to_list" == "true" ]]; then
        if ! grep -q "^$website$" "$BLOCKLIST_FILE" 2>/dev/null; then
            echo "$website" >> "$BLOCKLIST_FILE"
            print_color $GREEN "ADDED: $website to blocklist"
            log "Added $website to blocklist"
        fi
    fi
    
    # Immediately block the website
    if ! grep -q "127.0.0.1[[:space:]]*$website" "$HOSTS_FILE" 2>/dev/null; then
        echo "127.0.0.1    $website" >> "$HOSTS_FILE"
        echo "127.0.0.1    www.$website" >> "$HOSTS_FILE"
        
        echo
        print_color $BOLD$RED "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$RED "║                     WEBSITE LOCKED                        ║"
        print_color $BOLD$RED "╚════════════════════════════════════════════════════════════╝"
        print_color $RED "  Target: $website"
        print_color $RED "  Status: Successfully blocked"
        if [[ "$add_to_list" == "true" ]]; then
            print_color $GREEN "  List: Added to blocklist"
        fi
        echo
        
        log "Locked website: $website"
        
        # Enhanced DNS cache clearing for browsers
        flush_dns_cache
        
        print_color $YELLOW "  Note: If $website still loads in browser, restart browser or clear DNS cache"
    else
        print_color $YELLOW "WARNING: $website is already locked"
    fi
}

# Remove website from blocklist
remove_from_blocklist() {
    local website=""
    local force_unblock=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -u|--unblock)
                force_unblock=true
                shift
                ;;
            -*)
                print_color $RED "ERROR: Unknown option: $1"
                print_color $BLUE "Usage: weblock remove [-u|--unblock] website"
                return 1
                ;;
            *)
                website="$1"
                shift
                ;;
        esac
    done
    
    if [[ -z "$website" ]]; then
        echo
        print_color $BOLD$RED "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$RED "║                      INVALID INPUT                        ║"
        print_color $BOLD$RED "╚════════════════════════════════════════════════════════════╝"
        print_color $RED "  Error: Please provide a website to remove"
        print_color $BLUE "  Usage: weblock remove [-u|--unblock] facebook.com"
        echo
        return 1
    fi
    
    # Ensure config files exist
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
    fi
    
    website=$(clean_website "$website")
    local found_in_list=false
    local was_blocked=false
    
    # Create the file if it doesn't exist
    if [[ ! -f "$BLOCKLIST_FILE" ]]; then
        touch "$BLOCKLIST_FILE"
    fi
    
    # Check if website exists in the blocklist
    if grep -q "^$website$" "$BLOCKLIST_FILE" 2>/dev/null; then
        sed -i "/^$website$/d" "$BLOCKLIST_FILE"
        found_in_list=true
        log "Removed $website from blocklist"
    fi
    
    # Check if website is currently blocked in hosts file
    if grep -q "127\.0\.0\.1[[:space:]]*$website" "$HOSTS_FILE" 2>/dev/null; then
        was_blocked=true
        if [[ "$force_unblock" == "true" ]]; then
            # Need root privileges to modify hosts file
            if [[ $EUID -ne 0 ]]; then
                print_color $YELLOW "  Note: Website is still blocked in hosts file. Run with sudo to fully unblock:"
                print_color $BLUE "  sudo weblock remove -u $website"
            else
                # Remove from hosts file
                sed -i "/127\.0\.0\.1[[:space:]]*$website$/d" "$HOSTS_FILE"
                sed -i "/127\.0\.0\.1[[:space:]]*www\.$website$/d" "$HOSTS_FILE"
                flush_dns_cache
                log "Unblocked $website from hosts file"
            fi
        fi
    fi
    
    # Display results
    if [[ "$found_in_list" == "true" ]]; then
        echo
        print_color $BOLD$GREEN "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$GREEN "║                   WEBSITE REMOVED                         ║"
        print_color $BOLD$GREEN "╚════════════════════════════════════════════════════════════╝"
        print_color $GREEN "  Target: $website"
        print_color $GREEN "  List: Removed from blocklist"
        
        if [[ "$was_blocked" == "true" ]]; then
            if [[ "$force_unblock" == "true" && $EUID -eq 0 ]]; then
                print_color $GREEN "  Blocking: Successfully unblocked"
            else
                if [[ "$force_unblock" == "true" ]]; then
                    print_color $YELLOW "  Blocking: Still blocked (run with sudo to unblock)"
                else
                    print_color $YELLOW "  Blocking: Still blocked (use -u to unblock)"
                fi
            fi
        else
            print_color $BLUE "  Blocking: Was not actively blocked"
        fi
        echo
    else
        echo
        print_color $BOLD$YELLOW "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$YELLOW "║                    WEBSITE NOT FOUND                      ║"
        print_color $BOLD$YELLOW "╚════════════════════════════════════════════════════════════╝"
        print_color $YELLOW "  Target: $website"
        print_color $YELLOW "  List: Not found in blocklist"
        
        if [[ "$was_blocked" == "true" ]]; then
            print_color $BLUE "  Note: Website is currently blocked but not in the blocklist"
            if [[ "$force_unblock" == "true" && $EUID -eq 0 ]]; then
                print_color $GREEN "  Blocking: Successfully unblocked"
            elif [[ "$force_unblock" == "true" ]]; then
                print_color $YELLOW "  Blocking: Still blocked (run with sudo to unblock)"
            else
                print_color $BLUE "  Use 'weblock unblock $website' or 'weblock remove -u $website' to unblock"
            fi
        fi
        
        print_color $BLUE "  Tip: Use 'weblock list' to see current blocklist"
        echo
    fi
}

# List blocked websites
list_blocklist() {
    init_files "silent"
    
    echo
    print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════╗"
    print_color $BOLD$CYAN "║                        WeBlock Status                        ║"
    print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════╝"
    echo
    
    # Show blocklist
    if [[ -f "$BLOCKLIST_FILE" ]]; then
        print_color $BOLD$BLUE "┌─ Blocklist"
        print_color $BLUE "├─────────────────────────────────────────────────────────────"
        local temp_sites=$(grep -v '^#' "$BLOCKLIST_FILE" | grep -v '^[[:space:]]*$')
        if [[ -n "$temp_sites" ]]; then
            echo "$temp_sites" | nl -w2 -s'. ' | sed 's/^/│  /' | while read line; do
                print_color $WHITE "$line"
            done
        else
            print_color $DIM "│  (empty)"
        fi
        print_color $BLUE "└─────────────────────────────────────────────────────────────"
        echo
    fi
    
    # Show currently blocked sites from hosts file
    print_color $BOLD$RED "┌─ Currently Blocked"
    print_color $RED "├─────────────────────────────────────────────────────────────"
    local blocked_sites=$(grep "127\.0\.0\.1.*\." "$HOSTS_FILE" 2>/dev/null | grep -v "localhost" | awk '{print $2}' | grep -v "^www\." | sort | uniq)
    if [[ -n "$blocked_sites" ]]; then
        echo "$blocked_sites" | nl -w2 -s'. ' | sed 's/^/│  /' | while read line; do
            print_color $WHITE "$line"
        done
    else
        print_color $DIM "│  (none)"
    fi
    print_color $RED "└─────────────────────────────────────────────────────────────"
    echo
}

# Block all websites in blocklist  
lock_all_websites() {
    check_root
    init_files "silent"
    
    echo
    print_color $BOLD$BLUE "╔════════════════════════════════════════════════════════════╗"
    print_color $BOLD$BLUE "║                 LOCKING ALL WEBSITES                      ║"
    print_color $BOLD$BLUE "╚════════════════════════════════════════════════════════════╝"
    
    local locked_count=0
    print_color $BLUE "Processing blocklist..."
    
    if [[ -f "$BLOCKLIST_FILE" ]]; then
        while IFS= read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "${line// }" ]] && continue
            
            website=$(echo "$line" | xargs) # trim whitespace
            website=$(clean_website "$website")
            
            # Skip if already blocked
            if grep -q "127\.0\.0\.1[[:space:]]*$website" "$HOSTS_FILE" 2>/dev/null; then
                continue
            fi
            
            # Add to hosts file
            echo "127.0.0.1    $website" >> "$HOSTS_FILE"
            echo "127.0.0.1    www.$website" >> "$HOSTS_FILE"
            
            print_color $RED "  [+] LOCKED: $website"
            ((locked_count++))
            
        done < "$BLOCKLIST_FILE"
    fi
    
    echo
    if [[ $locked_count -gt 0 ]]; then
        print_color $BOLD$GREEN "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$GREEN "║                    OPERATION COMPLETE                     ║"
        print_color $BOLD$GREEN "╚════════════════════════════════════════════════════════════╝"
        print_color $GREEN "  Websites locked: $locked_count"
        print_color $GREEN "  Status: All sites successfully blocked"
        print_color $YELLOW "  Note: If sites still load in browser, restart browser or clear DNS cache"
    else
        print_color $YELLOW "No new websites to lock (all already blocked)"
    fi
    echo
    
    log "Locked $locked_count websites from blocklist"
    
    flush_dns_cache
}

# Unblock all websites
unblock_all_websites() {
    check_root
    
    if [[ ! -f "$BACKUP_FILE" ]]; then
        print_color $RED "ERROR: Backup file not found. Cannot restore hosts file."
        return 1
    fi
    
    # Restore original hosts file
    cp "$BACKUP_FILE" "$HOSTS_FILE"
    
    print_color $GREEN "SUCCESS: All websites unblocked"
    log "Unblocked all websites"
    
    flush_dns_cache
}

# DNS cache clearing
flush_dns_cache() {
    print_color $BLUE "Clearing DNS cache..."
    
    # Flush systemd-resolved cache
    if command -v systemd-resolve &> /dev/null; then
        systemd-resolve --flush-caches 2>/dev/null
        print_color $GREEN "  systemd-resolve cache cleared"
    elif command -v resolvectl &> /dev/null; then
        resolvectl flush-caches 2>/dev/null
        print_color $GREEN "  resolvectl cache cleared"
    fi
    
    # Restart systemd-resolved to ensure changes take effect
    if systemctl is-active --quiet systemd-resolved; then
        systemctl restart systemd-resolved 2>/dev/null
        print_color $GREEN "  systemd-resolved restarted"
    fi
    
    # Clear browser DNS caches (instructions)
    print_color $YELLOW "NOTE: To ensure blocking works in browsers:"
    print_color $YELLOW "   • Chrome/Brave: chrome://net-internals/#dns → Clear host cache"
    print_color $YELLOW "   • Firefox: about:networking#dns → Clear DNS Cache"
    print_color $YELLOW "   • Or restart your browser"
    print_color $YELLOW "   • Disable DNS over HTTPS in browser settings if needed"
}

# Reset WeBlock configuration
reset_weblock() {
    local force=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -f|--force)
                force=true
                shift
                ;;
            -*)
                print_color $RED "ERROR: Unknown option: $1"
                print_color $BLUE "Usage: weblock reset [-f|--force]"
                return 1
                ;;
            *)
                print_color $RED "ERROR: Unknown argument: $1"
                print_color $BLUE "Usage: weblock reset [-f|--force]"
                return 1
                ;;
        esac
    done
    
    if [[ "$force" != "true" ]]; then
        echo
        print_color $BOLD$YELLOW "╔════════════════════════════════════════════════════════════╗"
        print_color $BOLD$YELLOW "║                    RESET CONFIRMATION                     ║"
        print_color $BOLD$YELLOW "╚════════════════════════════════════════════════════════════╝"
        print_color $YELLOW "  This will:"
        print_color $RED "    • Remove all websites from blocklist"
        print_color $RED "    • Restore original hosts file (unblock all)"
        print_color $RED "    • Clear all WeBlock configuration"
        echo
        print_color $BOLD$RED "  This action cannot be undone!"
        echo
        print_color $BLUE "  To confirm, run: weblock reset -f"
        echo
        return 0
    fi
    
    check_root
    
    echo
    print_color $BOLD$BLUE "╔════════════════════════════════════════════════════════════╗"
    print_color $BOLD$BLUE "║                   RESETTING WEBLOCK                       ║"
    print_color $BOLD$BLUE "╚════════════════════════════════════════════════════════════╝"
    
    # Restore original hosts file
    print_color $BLUE "  [1/4] Restoring original hosts file..."
    if [[ -f "$BACKUP_FILE" ]]; then
        cp "$BACKUP_FILE" "$HOSTS_FILE"
        print_color $GREEN "        Hosts file restored"
    else
        # If no backup exists, manually remove WeBlock entries
        sed -i '/127\.0\.0\.1.*\./d' "$HOSTS_FILE"
        # Restore localhost entry if it was removed
        if ! grep -q "127.0.0.1.*localhost" "$HOSTS_FILE"; then
            echo "127.0.0.1    localhost" >> "$HOSTS_FILE"
        fi
        print_color $YELLOW "        No backup found, manually cleaned hosts file"
    fi
    
    # Clear blocklists
    print_color $BLUE "  [2/4] Clearing blocklist..."
    if [[ -f "$BLOCKLIST_FILE" ]]; then
        > "$BLOCKLIST_FILE"
        print_color $GREEN "        Blocklist cleared"
    fi
    
    # Clear DNS cache
    print_color $BLUE "  [3/4] Clearing DNS cache..."
    flush_dns_cache > /dev/null 2>&1
    print_color $GREEN "        DNS cache cleared"
    
    # Reinitialize clean configuration
    print_color $BLUE "  [4/4] Reinitializing configuration..."
    init_files "silent"
    print_color $GREEN "        Configuration reinitialized"
    
    echo
    print_color $BOLD$GREEN "╔════════════════════════════════════════════════════════════╗"
    print_color $BOLD$GREEN "║                    RESET COMPLETE                         ║"
    print_color $BOLD$GREEN "╚════════════════════════════════════════════════════════════╝"
    print_color $GREEN "  All websites have been unblocked"
    print_color $GREEN "  Blocklist has been cleared"
    print_color $GREEN "  WeBlock is ready for fresh configuration"
    echo
    
    log "WeBlock configuration reset (forced)"
}

# Show help
show_help() {
    cat << EOF

$(print_color $BOLD$CYAN "╔══════════════════════════════════════════════════════════════════════════════╗")
$(print_color $BOLD$CYAN "║                      WeBlock - Website Blocker                              ║")
$(print_color $BOLD$CYAN "║                    System-wide blocking for Arch Linux                      ║")
$(print_color $BOLD$CYAN "╚══════════════════════════════════════════════════════════════════════════════╝")

$(print_color $BOLD$BLUE "┌─ INSTALLATION")
$(print_color $BLUE "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  sudo cp weblock /usr/local/bin/")
$(print_color $WHITE "│  sudo chmod +x /usr/local/bin/weblock")
$(print_color $BLUE "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$RED "┌─ UNINSTALL")
$(print_color $RED "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  sudo rm /usr/local/bin/weblock")
$(print_color $WHITE "│  rm -rf ~/.config/weblock  # (optional, removes configuration)")
$(print_color $RED "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$GREEN "┌─ MAIN COMMANDS")
$(print_color $GREEN "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  $(print_color $CYAN "weblock lock")      <website> [-n]    Lock (block) specific website")
$(print_color $WHITE "│  $(print_color $CYAN "weblock block")     <website>         Block website without adding to list")
$(print_color $WHITE "│  $(print_color $CYAN "weblock lock-all")                    Lock all websites from blocklist")
$(print_color $WHITE "│  $(print_color $CYAN "weblock unlock")    [website]         Unlock specific website or all")
$(print_color $WHITE "│  $(print_color $CYAN "weblock list")                        Show status and blocklist")
$(print_color $WHITE "│  $(print_color $CYAN "weblock remove")    <website> [-u]    Remove website from blocklist")
$(print_color $WHITE "│  $(print_color $CYAN "weblock reset")     [-f|--force]      Reset all configuration")
$(print_color $GREEN "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$PURPLE "┌─ FLAGS & OPTIONS")
$(print_color $PURPLE "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  $(print_color $GREEN "-n, --no-list")   Don't add website to blocklist when locking")
$(print_color $WHITE "│  $(print_color $GREEN "-u, --unblock")   Also unblock website when removing from list")
$(print_color $WHITE "│  $(print_color $GREEN "-f, --force")     Force reset without confirmation")
$(print_color $PURPLE "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $BOLD$PURPLE "┌─ EXAMPLES")
$(print_color $PURPLE "├──────────────────────────────────────────────────────────────────────────────")
$(print_color $WHITE "│  $(print_color $GREEN "Basic:")         weblock init                    # Initialize WeBlock")
$(print_color $WHITE "│                 weblock lock facebook.com          # Lock Facebook")
$(print_color $WHITE "│                 weblock list                       # Show status")
$(print_color $WHITE "│                 weblock remove -u facebook.com     # Remove & unblock")
$(print_color $WHITE "│")
$(print_color $WHITE "│  $(print_color $GREEN "Advanced:")      weblock lock -n facebook.com      # Block without adding to list")
$(print_color $WHITE "│                 weblock lock-all                   # Block all sites in list")
$(print_color $WHITE "│                 weblock unlock                     # Unblock all websites")
$(print_color $WHITE "│                 sudo weblock reset -f              # Complete reset")
$(print_color $PURPLE "└──────────────────────────────────────────────────────────────────────────────")

$(print_color $DIM "Configuration: ~/.config/weblock/")
$(print_color $DIM "Note: Blocking/unblocking requires sudo privileges")

EOF
}

# Main script logic
main() {
    local command="${1:-help}"
    shift 2>/dev/null

    case "$command" in
        init)
            init_files "show_banner"
            ;;
        lock)
            lock_website "$@"
            ;;
        block)
            block_single_website "$@"
            ;;
        lock-all)
            lock_all_websites
            ;;
        remove)
            remove_from_blocklist "$@"
            ;;
        list|ls)
            list_blocklist
            ;;
        unlock)
            if [[ -n "$1" ]]; then
                unblock_single_website "$1"
            else
                unblock_all_websites
            fi
            ;;
        reset)
            reset_weblock "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_color $RED "ERROR: Unknown command: $command"
            print_color $BLUE "Run 'weblock help' for usage information"
            exit 1
            ;;
    esac
}

# Initialize if config doesn't exist
if [[ ! -d "$CONFIG_DIR" ]]; then
    init_files
fi

# Run main function
main "$@"
